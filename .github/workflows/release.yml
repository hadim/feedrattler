name: Release

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: "A valid Semver version string"
        required: true
        type: string

permissions:
  contents: write

concurrency:
  group: "release-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  release:
    name: release-${{ github.event.inputs.release-version }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: prefix-dev/setup-pixi@v0.8.3
        with:
          activate-environment: true

      # Check if the release string is valid and ok

      - name: Check the version is valid semver
        run: |
          RELEASE_VERSION="${{ inputs.release-version }}"

          {
            pysemver check $RELEASE_VERSION
          } || {
            echo "The version '$RELEASE_VERSION' is not a valid Semver version string."
            echo "Please use a valid semver version string. More details at https://semver.org/"
            echo "The release process is aborted."
            exit 1
          }

      - name: Check the version is higher than the latest one
        run: |
          RELEASE_VERSION="${{ inputs.release-version }}"
          LATEST_VERSION=$(git describe --abbrev=0 --tags)

          IS_HIGHER_VERSION=$(pysemver compare $RELEASE_VERSION $LATEST_VERSION)

          if [ "$IS_HIGHER_VERSION" != "1" ]; then
            echo "The version '$RELEASE_VERSION' is not higher than the latest version '$LATEST_VERSION'."
            echo "The release process is aborted."
            exit 1
          fi

      # Install and check the source code

      - name: Build and install package
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ inputs.release-version }}
        run: pixi install

      - name: Lint source code
        run: pixi run lint-format

      - name: Run tests
        run: pixi run tests

      # Release logic

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: --verbose --unreleased --strip header --prepend CHANGELOG.md --tag ${{ inputs.release-version }}

      - name: Print the changelog
        run: cat "${{ steps.git-cliff.outputs.changelog }}"

      - name: Configure git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Commit the changelog
        run: |
          git add CHANGELOG.md
          git commit -m "Update changelog for ${{ inputs.release-version }}"
          git push origin main

      - name: Create and push git tag
        run: |
          git tag -a "${{ inputs.release-version }}" -m "Release version ${{ inputs.release-version }}"
          git push origin "${{ inputs.release-version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.release-version }}
          body: ${{ steps.git-cliff.outputs.content }}
